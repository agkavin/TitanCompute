# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import titancompute_pb2 as titancompute__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in titancompute_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class CoordinatorServiceStub(object):
    """Coordinator Service - Central orchestration
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestInference = channel.unary_unary(
                '/titancompute.v1.CoordinatorService/RequestInference',
                request_serializer=titancompute__pb2.InferenceRequest.SerializeToString,
                response_deserializer=titancompute__pb2.InferenceResponse.FromString,
                _registered_method=True)
        self.RegisterAgent = channel.unary_unary(
                '/titancompute.v1.CoordinatorService/RegisterAgent',
                request_serializer=titancompute__pb2.AgentRegistration.SerializeToString,
                response_deserializer=titancompute__pb2.RegistrationResponse.FromString,
                _registered_method=True)
        self.ReportHealth = channel.stream_stream(
                '/titancompute.v1.CoordinatorService/ReportHealth',
                request_serializer=titancompute__pb2.HealthUpdate.SerializeToString,
                response_deserializer=titancompute__pb2.HealthAck.FromString,
                _registered_method=True)
        self.QuerySystemStatus = channel.unary_unary(
                '/titancompute.v1.CoordinatorService/QuerySystemStatus',
                request_serializer=titancompute__pb2.StatusRequest.SerializeToString,
                response_deserializer=titancompute__pb2.SystemStatus.FromString,
                _registered_method=True)
        self.GetPublicKey = channel.unary_unary(
                '/titancompute.v1.CoordinatorService/GetPublicKey',
                request_serializer=titancompute__pb2.PublicKeyRequest.SerializeToString,
                response_deserializer=titancompute__pb2.PublicKeyResponse.FromString,
                _registered_method=True)


class CoordinatorServiceServicer(object):
    """Coordinator Service - Central orchestration
    """

    def RequestInference(self, request, context):
        """Client requests inference routing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterAgent(self, request, context):
        """Agent registration and health reporting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportHealth(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySystemStatus(self, request, context):
        """System queries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPublicKey(self, request, context):
        """JWT public key distribution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestInference': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestInference,
                    request_deserializer=titancompute__pb2.InferenceRequest.FromString,
                    response_serializer=titancompute__pb2.InferenceResponse.SerializeToString,
            ),
            'RegisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAgent,
                    request_deserializer=titancompute__pb2.AgentRegistration.FromString,
                    response_serializer=titancompute__pb2.RegistrationResponse.SerializeToString,
            ),
            'ReportHealth': grpc.stream_stream_rpc_method_handler(
                    servicer.ReportHealth,
                    request_deserializer=titancompute__pb2.HealthUpdate.FromString,
                    response_serializer=titancompute__pb2.HealthAck.SerializeToString,
            ),
            'QuerySystemStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySystemStatus,
                    request_deserializer=titancompute__pb2.StatusRequest.FromString,
                    response_serializer=titancompute__pb2.SystemStatus.SerializeToString,
            ),
            'GetPublicKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPublicKey,
                    request_deserializer=titancompute__pb2.PublicKeyRequest.FromString,
                    response_serializer=titancompute__pb2.PublicKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'titancompute.v1.CoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('titancompute.v1.CoordinatorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CoordinatorService(object):
    """Coordinator Service - Central orchestration
    """

    @staticmethod
    def RequestInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/titancompute.v1.CoordinatorService/RequestInference',
            titancompute__pb2.InferenceRequest.SerializeToString,
            titancompute__pb2.InferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/titancompute.v1.CoordinatorService/RegisterAgent',
            titancompute__pb2.AgentRegistration.SerializeToString,
            titancompute__pb2.RegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReportHealth(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/titancompute.v1.CoordinatorService/ReportHealth',
            titancompute__pb2.HealthUpdate.SerializeToString,
            titancompute__pb2.HealthAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QuerySystemStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/titancompute.v1.CoordinatorService/QuerySystemStatus',
            titancompute__pb2.StatusRequest.SerializeToString,
            titancompute__pb2.SystemStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPublicKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/titancompute.v1.CoordinatorService/GetPublicKey',
            titancompute__pb2.PublicKeyRequest.SerializeToString,
            titancompute__pb2.PublicKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AgentServiceStub(object):
    """Agent Service - Direct client streaming
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamInference = channel.unary_stream(
                '/titancompute.v1.AgentService/StreamInference',
                request_serializer=titancompute__pb2.StreamRequest.SerializeToString,
                response_deserializer=titancompute__pb2.StreamResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/titancompute.v1.AgentService/GetStatus',
                request_serializer=titancompute__pb2.AgentStatusRequest.SerializeToString,
                response_deserializer=titancompute__pb2.AgentStatusResponse.FromString,
                _registered_method=True)


class AgentServiceServicer(object):
    """Agent Service - Direct client streaming
    """

    def StreamInference(self, request, context):
        """Direct streaming inference (bypasses coordinator)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Agent status queries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamInference': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamInference,
                    request_deserializer=titancompute__pb2.StreamRequest.FromString,
                    response_serializer=titancompute__pb2.StreamResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=titancompute__pb2.AgentStatusRequest.FromString,
                    response_serializer=titancompute__pb2.AgentStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'titancompute.v1.AgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('titancompute.v1.AgentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentService(object):
    """Agent Service - Direct client streaming
    """

    @staticmethod
    def StreamInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/titancompute.v1.AgentService/StreamInference',
            titancompute__pb2.StreamRequest.SerializeToString,
            titancompute__pb2.StreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/titancompute.v1.AgentService/GetStatus',
            titancompute__pb2.AgentStatusRequest.SerializeToString,
            titancompute__pb2.AgentStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
